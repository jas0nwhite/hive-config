package org.hnl.hive.cfg.matlab

import org.hnl.hive.cfg.TreatmentConfig
import org.hnl.matlab.M._
import org.hnl.matlab.MExp
import org.hnl.matlab.MExp._

/**
  * TargetCatalog
  * <p>
  * Created on Mar 8, 2016.
  * <p>
  *
  * @author Jason White
  */
case class TargetCatalog(name: String, cfg: TreatmentConfig) extends MatClassFile {

  override val pkg = "hive.cfg"

  protected val paths: ClassProps =
    ClassProps().attribs("Constant")
      .%(
        "",
        "target directories",
        ""
      )
      .+(
        'sourceSpecList %=% CCell(cfg.targetSourceSpecs: _*),
        'resultPathList %=% CCell(cfg.targetResultPaths: _*)
      )

  protected val settings: ClassProps =
    ClassProps().attribs("Constant")
      .%(
        "",
        "settings",
        ""
      )
      .+(
        'trainingDataFile %=% cfg.targetTrainingDataFile,
        'predictionSpec %=% cfg.targetPredicitonSpec,
        'vgramWindowList %=% CCell(cfg.targetVgramWindows.map(l => RVec(l: _*)): _*)
      )

  protected val catalogs: ClassProps =
    ClassProps().attribs("Constant")
      .%(
        "",
        "catalogs",
        ""
      )
      .+(
        'sourceCatalog %=% makeIndexedCellArray(cfg.targetSourceCatalog)((s: String) => Str(s)),
        'datasetCatalog %=% makeIndexedCellArray(cfg.targetDatasetCatalog)((s: String) => Str(s))
      )

  override val mClass: ClassDef =
    ClassDef(name).from("hive.cfg.CatalogBase")
      .%(
        s"target catalog for HIVE treatment '${cfg.name}'",
        "",
        "this code was generated by scala"
      )
      .+(
        paths,
        settings,
        catalogs
      )
}
