package org.hnl.hive.cfg.matlab

/**
 * Chem
 * <p>
 * Created on Mar 1, 2016.
 * <p>
 *
 * @author Jason White
 */
case class Chem(chems: List[ChemClass], treatment: String) extends MatlabChunk with MatlabFormatting {

  def toMatlab: String = // scalastyle:ignore method.length
    s"""
classdef Chem < uint32
    % Chemicals for use in HIVE treatment $treatment
    %
    % It is convenient to subclass uint32 so that the chemical literals can be
    % used as an index into a matrix, but we can't add properties to uint32.
    %
    % Therefore, we will add methods that perform lookups into persistent arrays
    % which hold the properties for each chemical literal.
    %
    % This code was generated by scala.

    enumeration
        $enumerateChemicals
    end

    methods
        function n = ix(this)
            n = uint32(this);
        end

        function s = colName(this)
            persistent values;
            values = ${cell(chems.sorted.map { _.colName })};
            s = values{this.ix};
        end

        function s = name(this)
            persistent values;
            values = ${cell(chems.sorted.map { _.name })};
            s = values{this.ix};
        end

        function s = label(this)
            persistent values;
            values = ${cell(chems.sorted.map { _.label })};
            s = values{this.ix};
        end

        function s = units(this)
            persistent values;
            values = ${cell(chems.sorted.map { _.units })};
            s = values{this.ix};
        end

        function s = neutral(this)
            persistent values;
            values = ${array(chems.sorted.map { _.neutral })};
            s = values(this.ix);
        end
    end

    methods (Static)
        function s = treatment()
            s = '${lit(treatment)}';
        end

        function n = count()
            n = length(enumeration('Chem'));
        end

        function c = get(x)
            [m, s] = enumeration('Chem');

            if isnumeric(x)
                try
                    c = m(x);
                catch ME
                    error('hive:Chem', 'Chemical not found for index %d', x);
                end
            elseif ischar(x)
                c = m(find(strcmp(s, x), 1, 'first'));
                if isempty(c)
                    error('hive:Chem', 'Chemical not found for name "%s"', x);
                end
            end
        end
    end
end

"""

  protected def enumerateChemicals: String =
    chems.sorted.map { c =>
      s"${lit(c.name)} (${lit(c.ix)})"
    }.mkString("\n        ")
}
