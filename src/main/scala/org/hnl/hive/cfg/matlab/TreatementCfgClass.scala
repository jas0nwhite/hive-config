package org.hnl.hive.cfg.matlab

import org.hnl.hive.cfg.TreatmentConfig
import org.hnl.matlab.M.{ ClassDef, ClassProps }
import org.hnl.matlab.MExp
import org.hnl.matlab.MExp._

/**
 * TreatementCfgClass
 * <p>
 * Created on Mar 1, 2016.
 * <p>
 *
 * @author Jason White
 */
case class TreatementCfgClass(cfg: TreatmentConfig) extends MExp {

  protected val treatmentDef =
    ClassProps().attribs("Constant")
      .%(
        "",
        "treatment definition",
        ""
      )
      .+(
        'name %=% cfg.name,
        'trainingSetId %=% cfg.trainingSetId.toInt,
        'trainingStyleId %=% cfg.trainingStyleId.toInt,
        'clusterStyleId %=% cfg.clusterStyleId.toInt,
        'alphaSelectId %=% cfg.alphaSelectId.toInt,
        'muSelectId %=% cfg.muSelectId.toInt
      )

  protected val treatmentDirs =
    ClassProps().attribs("Constant")
      .%(
        "",
        "treatment directories",
        ""
      )
      .+(
        'projectRoot %=% cfg.projectRoot,
        'trainingPath %=% cfg.trainingPath,
        'modelPath %=% cfg.modelPath,
        'clusterPath %=% cfg.clusterPath,
        'alphaPath %=% cfg.alphaPath,
        'muPath %=% cfg.muPath
      )

  protected val mClass =
    ClassDef("Config").from("handle")
      .%(
        s"configruation information for HIVE treatment '${cfg.name}'",
        "",
        "this code was generated by scala"
      )
      .+(
        treatmentDef,
        treatmentDirs
      )

  override def toMatlab: String = mClass.toMatlab

}
